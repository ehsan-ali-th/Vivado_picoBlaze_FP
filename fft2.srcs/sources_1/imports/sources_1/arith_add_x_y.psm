;-----------------------------------------------------------------------------------
; Software Implementation of Floating-Point Arithmetic, Double-Precision (64 bit).
;
;	beta(radix) = 2, k(width) = 64, p(precision) = 53, e_max = 1023
;
;------------------------------------------------------------------------------------
; Procedure:			arith_mul_x_y()
;
; Registers Used:	Bank0 : All
;					Bank1 : None		
;		
; Arguments:			Bank0 : 
;					Bank1 : None
;					SPM   : x = [x_7, x_6, ..., x_0]
;			      			y = [y_7, y_6, ..., y_0]						
;
; Calls:				
;
; RETs:				None
; 
; RET Flags:			None
;
; Description:		Adds two 64-bit double-precision floating point numbers.
;  	This procedure always add. For subtraction set the sign of second  operand 
;	to negative due to the fact that x + (-y) = x - y.          
;------------------------------------------------------------------------------------
arith_mul_x_y:
	CALL 	set_ops_status
	CALL 	decompose_x
	CALL 	decompose_y
	CALL 	mul_special_cases
	COMP	sF, 0xFF
	JUMP	Z, done_multiplying
	; 	subnormal * subnormal = subnormal
	;	normal	  * subnormal = convert to normal
	;	normal	  * normal	  = normal	
	RDMEM 	s1, op1_status	; read the ops status
	RDMEM 	s2, op2_status	; read the ops status	TEST	s1, 0x80
	JUMP 	NZ,	mul_op1_is_subnormal
	; op1 is normal
	TEST	s2, 0x80
	JUMP 	NZ,	mul_op1_normal_op2_subnormal
	; op1 and op2 both are normal	
	CALL 	mul_mx_my		; result is in [Umr_6, Umr_0]
	CALL	add_ex_ey		; exponent of result in [s1, s0]
	JUMP	mul_compose_result
mul_op1_normal_op2_subnormal:
	; Perform cancellation on op2
	RDMEM s6, y_m6			; only right nibble of s6 contains y significand
	RDMEM s5, y_m5
	RDMEM s4, y_m4
	RDMEM s3, y_m3
	RDMEM s2, y_m2
	RDMEM s1, y_m1
	RDMEM s0, y_m0
	CALL 	mul_cancellation		; return sA = number of bits shifted to left
	; Subtract exponent by sA
	RDMEM	sE, y_ex6
	RDMEM	sF, y_ex7
	SUB		sE, sA
	SUBC	sF, 0x00
	WRMEM	sE, y_ex6
	WRMEM	sF, y_ex7
	CALL 	mul_mx_my		; result is in [Umr_6, Umr_0]
	CALL	add_ex_ey		; exponent of result in [s1, s0]
	JUMP	mul_compose_result	
mul_op1_is_subnormal:
	TEST	s2, 0x80
	JUMP 	NZ,	mul_op1_op2_both_subnormal
	; op1 is subnormal but op2 is normal
	; Perform cancellation on op2
	RDMEM s6, x_m6			; only right nibble of s6 contains y significand
	RDMEM s5, x_m5
	RDMEM s4, x_m4
	RDMEM s3, x_m3
	RDMEM s2, x_m2
	RDMEM s1, x_m1
	RDMEM s0, x_m0
	CALL 	mul_cancellation		; return sA = number of bits shifted to left
	; Subtract exponent by sA
	RDMEM	sE, x_ex6
	RDMEM	sF, x_ex7
	SUB		sE, sA
	SUBC	sF, 0x00
	WRMEM	sE, x_ex6
	WRMEM	sF, x_ex7
	CALL 	mul_mx_my		; result is in [Umr_6, Umr_0]
	CALL	add_ex_ey		; exponent of result in [s1, s0]
	JUMP mul_compose_result
mul_op1_op2_both_subnormal:
	CALL 	mul_mx_my		; result is in [Umr_6, Umr_0]
	LOAD	s1, 0x00
	LOAD	s0, 0x00
mul_compose_result:	
	; Compose the result
	RDMEM	s8, Umr_6
	RDMEM	s7, Umr_5
	RDMEM	s6, Umr_4
	RDMEM	s5, Umr_3
	RDMEM	s4, Umr_2
	RDMEM	s3, Umr_1
	RDMEM	s2, Umr_0
	; shif significand result to left by 2
	SL0		s2
	ROLC	s3	
	ROLC	s4	
	ROLC	s5	
	ROLC	s6	
	ROLC	s7	
	ROLC	s8	
	SL0		s2
	ROLC	s3	
	ROLC	s4	
	ROLC	s5	
	ROLC	s6	
	ROLC	s7	
	ROLC	s8	
	AND		s8, 0x0F					; Zero the unused nibble
	TEST	s8, 0x08					; if bit 106 is 1 then shiftsignificand to left by 1 
	JUMP	Z, dont_inc_exponent		;	and increment the exponent
	; shift significand left by 1	
	SL0		s2
	ROLC	s3	
	ROLC	s4	
	ROLC	s5	
	ROLC	s6	
	ROLC	s7	
	ROLC	s8
	AND		s8, 0x0F					; Zero the unused nibble
	; add 1 to exponent
	ADD		s0, 0x01
	ADDC	s1, 0x00
dont_inc_exponent:	
	; Shift the exponent result to left by 4 bit.
	SL0		s0
	ROLC	s1
	ROLC	s0
	ROLC	s1
	ROLC	s0
	ROLC	s1
	ROLC	s0
	ROLC	s1
	AND		s0, 0xF0
	; Combine exponent and significand
	OR		s8, s0
	; Calculate the sign
	RDMEM	sF,	x_sign
	RDMEM	sE,	y_sign
	XOR		sF, sE			; Calculate the sign
	AND		sF, 0x80	
	OR		s1, sF			; Apply the sign
	; Save the result in SMP
	WRMEM 	s2, r_0
	WRMEM 	s3, r_1
	WRMEM 	s4, r_2
	WRMEM 	s5, r_3
	WRMEM 	s6, r_4
	WRMEM 	s7, r_5
	WRMEM 	s8, r_6 
	WRMEM 	s1, r_7		
done_multiplying:	
	RET
	
;------------------------------------------------------------------------------------
; Procedure:			mul_mx_my()
;
; Registers Used:	Bank0 : All
;					Bank1 : None		
;		
; Arguments:			Bank0 : None
;					Bank1 : None
;					SPM   : x_m6, x_m5, ... x_m0 (7-bytes)
;							y_m6, y_m5, ... y_m0	 (7-bytes)
;			      			
;
; Calls:				
;
; RETs:				Bank1: 
; 
; RET Flags:			None
;
; Description:		Multiplies two 53-bit double-precision floating point numbers.
;------------------------------------------------------------------------------------
mul_mx_my:
	; Setup shifted mx SPM
	LOAD	sD, 0x00
	LOAD	sC, 0x00
	LOAD	sB, 0x00
	LOAD	sA, 0x00
	LOAD	s9, 0x00
	LOAD	s8, 0x00
	LOAD	s7, 0x00
	RDMEM 	s6, x_m6
	RDMEM	s5, x_m5
	RDMEM 	s4, x_m4
	RDMEM 	s3, x_m3
	RDMEM 	s2, x_m2
	RDMEM 	s1, x_m1
	RDMEM 	s0, x_m0
	WRMEM	sD, Umx_shifted_6
	WRMEM	sC, Umx_shifted_5
	WRMEM	sB, Umx_shifted_4
	WRMEM	sA, Umx_shifted_3
	WRMEM	s9, Umx_shifted_2
	WRMEM	s8, Umx_shifted_1
	WRMEM	s7, Umx_shifted_0
	WRMEM	s6, Lmx_shifted_6
	WRMEM	s5, Lmx_shifted_5
	WRMEM	s4, Lmx_shifted_4
	WRMEM	s3, Lmx_shifted_3
	WRMEM	s2, Lmx_shifted_2
	WRMEM	s1, Lmx_shifted_1
	WRMEM	s0, Lmx_shifted_0
	LOAD	sF, 0x00				; Initially shift to left by 0
	LOAD	sE, 0x00				; Initially shift to left by 0
;	TEST	s0, 0x01				; Test if bit 0 is one
;	JUMP 	NZ, shifting_mx_left_done
next_shift_add:
	; load my
	RDMEM 	s6, y_m6
	RDMEM 	s5, y_m5
	RDMEM 	s4, y_m4
	RDMEM 	s3, y_m3
	RDMEM 	s2, y_m2
	RDMEM 	s1, y_m1
	RDMEM 	s0, y_m0
next_right_shift:
	COMP	sF, 0x35						; Have reached 54?		
	JUMP	Z, finish_mul				; Yes: Finish the multiplication
	TEST	s0, 0x01						; Check the LSB
	JUMP 	NZ,	shift_and_add			; if it is 1: shift and add
	; it is 0: shift my to right by 1
	SR0		s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0		
	ADD		sE, 0x01		
	ADD		sF, 0x01		
	JUMP	next_right_shift		
shift_and_add:
	; Save shifted my into SPM
	WRMEM 	s6, y_m6
	WRMEM 	s5, y_m5
	WRMEM 	s4, y_m4
	WRMEM 	s3, y_m3
	WRMEM 	s2, y_m2
	WRMEM 	s1, y_m1
	WRMEM 	s0, y_m0
	; load mx	
	RDMEM	sD, Umx_shifted_6
	RDMEM	sC, Umx_shifted_5
	RDMEM	sB, Umx_shifted_4
	RDMEM	sA, Umx_shifted_3
	RDMEM	s9, Umx_shifted_2
	RDMEM	s8, Umx_shifted_1
	RDMEM	s7, Umx_shifted_0
	RDMEM	s6, Lmx_shifted_6
	RDMEM	s5, Lmx_shifted_5
	RDMEM	s4, Lmx_shifted_4
	RDMEM	s3, Lmx_shifted_3
	RDMEM	s2, Lmx_shifted_2
	RDMEM	s1, Lmx_shifted_1
	RDMEM	s0, Lmx_shifted_0
	COMP	sE, 0x00
	JUMP	Z, shifting_mx_left_done2
	; Shift mx left by sE
keep_shifting_mx_left:	
	Sl0		s0
	ROLC	s1
	ROLC	s2
	ROLC	s3
	ROLC	s4
	ROLC	s5
	ROLC	s6	
	ROLC	s7	
	ROLC	s8	
	ROLC	s9	
	ROLC	sA	
	ROLC	sB	
	ROLC	sC	
	ROLC	sD	
	SUB		sE, 0x01
	JUMP	NZ,	keep_shifting_mx_left
shifting_mx_left_done:
	WRMEM	sD, Umx_shifted_6
	WRMEM	sC, Umx_shifted_5
	WRMEM	sB, Umx_shifted_4
	WRMEM	sA, Umx_shifted_3
	WRMEM	s9, Umx_shifted_2
	WRMEM	s8, Umx_shifted_1
	WRMEM	s7, Umx_shifted_0
	WRMEM	s6, Lmx_shifted_6
	WRMEM	s5, Lmx_shifted_5
	WRMEM	s4, Lmx_shifted_4
	WRMEM	s3, Lmx_shifted_3
	WRMEM	s2, Lmx_shifted_2
	WRMEM	s1, Lmx_shifted_1
	WRMEM	s0, Lmx_shifted_0
shifting_mx_left_done2:	
	; now add shifted mx to the previous result (mr)
	; Load lower half of mr into registers [sD, s7]
	RDMEM	sD, Lmr_6
	RDMEM	sC, Lmr_5
	RDMEM	sB, Lmr_4
	RDMEM	sA, Lmr_3
	RDMEM	s9, Lmr_2
	RDMEM	s8, Lmr_1
	RDMEM	s7, Lmr_0
	; Load lower half of shifted mx into registers [s6, s0] :already there
	; Add 
	ADD		s0, s7
	ADDC	s1, s8
	ADDC	s2, s9
	ADDC	s3, sA
	ADDC	s4, sB
	ADDC	s5, sC
	ADDC	s6, sD
	; save result
	WRMEM	s6, Lmr_6
	WRMEM	s5, Lmr_5
	WRMEM	s4, Lmr_4
	WRMEM	s3, Lmr_3
	WRMEM	s2, Lmr_2
	WRMEM	s1, Lmr_1
	WRMEM	s0, Lmr_0
;	JUMP	NC, no_carry_for_lower_add
	; save the carry
;	LOAD 	s7, 0x01
;	WRMEM	s7, mr_save_carry
;no_carry_for_lower_add:	
	; Load upper half of mr into registers [sD, s7]
	RDMEM	sD, Umr_6
	RDMEM	sC, Umr_5
	RDMEM	sB, Umr_4
	RDMEM	sA, Umr_3
	RDMEM	s9, Umr_2
	RDMEM	s8, Umr_1
	RDMEM	s7, Umr_0
	; Load upper half of shifted mx into registers [s6, s0]
	RDMEM	s6, Umx_shifted_6
	RDMEM	s5, Umx_shifted_5
	RDMEM	s4, Umx_shifted_4
	RDMEM	s3, Umx_shifted_3
	RDMEM	s2, Umx_shifted_2
	RDMEM	s1, Umx_shifted_1
	RDMEM	s0, Umx_shifted_0
	; Add
	ADDC	s0, s7
	ADDC	s1, s8
	ADDC	s2, s9
	ADDC	s3, sA
	ADDC	s4, sB
	ADDC	s5, sC
	ADDC	s6, sD
	; save result
	WRMEM	s6, Umr_6
	WRMEM	s5, Umr_5
	WRMEM	s4, Umr_4
	WRMEM	s3, Umr_3
	WRMEM	s2, Umr_2
	WRMEM	s1, Umr_1
	WRMEM	s0, Umr_0


	;shift my to right by 1 so we can check its LSB in next round
	; load my
	RDMEM 	s6, y_m6
	RDMEM 	s5, y_m5
	RDMEM 	s4, y_m4
	RDMEM 	s3, y_m3
	RDMEM 	s2, y_m2
	RDMEM 	s1, y_m1
	RDMEM 	s0, y_m0
	SR0		s6
	RORC	s5
	RORC	s4
	RORC	s3
	RORC	s2
	RORC	s1
	RORC	s0
	WRMEM 	s6, y_m6
	WRMEM 	s5, y_m5
	WRMEM 	s4, y_m4
	WRMEM 	s3, y_m3
	WRMEM 	s2, y_m2
	WRMEM 	s1, y_m1
	WRMEM 	s0, y_m0
	
	ADD		sF, 0x01
	LOAD	sE, 0x01				; tracks the numebr of shifts per round, set it to zero for next round
	JUMP 	next_shift_add
	
finish_mul:
	RET
	
;------------------------------------------------------------------------------------
; Procedure:			add_ex_ey()
;
; Registers Used:	Bank0 : All
;					Bank1 : None		
;		
; Arguments:			Bank0 : None
;					Bank1 : None
;					SPM   : x_m6, x_m5, ... x_m0 (7-bytes)
;							y_m6, y_m5, ... y_m0	 (7-bytes)
;			      			
;
; Calls:				
;
; RETs:				Bank1: [s1. s0]
; 
; RET Flags:			None
;
; Description:		Calculates the ex + ey which is Ex + Ey - bias(1023) and returns
;						the result in [s1, s0].
;------------------------------------------------------------------------------------
add_ex_ey:	SL0		s2
	ROLC	s3	
	ROLC	s4	
	ROLC	s5	
	ROLC	s6	
	ROLC	s7	
	ROLC	s8
	RDMEM 	s1, x_ex7
	RDMEM 	s0, x_ex6
	RDMEM 	s3, y_ex7
	RDMEM 	s2, y_ex6
	ADD		s0, s2
	ADDC	s1, s3
	SUB		s0, 0xFF			; subtract by 1023'd =  0x03FF
	SUBC	s1, 0x03
	RET
	
;------------------------------------------------------------------------------------
; Procedure:			mul_special_cases()
;
; Registers Used:	Bank0 : s1, s2
;					Bank1 : None		
;		
; Arguments:			Bank0 : None
;					Bank1 : None
;			      			
;
; Calls:				
;
; RETs:				Bank1: [s1. s0]
; 
; RET Flags:			None
;
; Description:		Takes care of special operands in multiplication.
;					Return 0xFF in sF if one of the operands is special.
;					If sF is 0xFF then the result is already in [r_7, r_8] in SPM.
;------------------------------------------------------------------------------------	
mul_special_cases:
	RDMEM 	s1, op1_status	; read the ops status
	RDMEM 	s2, op2_status	; read the ops status
	; We check op1 for 
	; 1) NaN
	;		Yes:	return X_NaN	
	;		No:		Go to step 2.
	; 2) Infinity
	;		Yes:	Check op2, if +0 and NaN then return_NaN_Inf
	;		No:		return +infinity
	; 3) Zero
	;		Yes:	check if op2 is +inf or NaN then return_NaN_Inf
	;				 else return 0
	;		No:		check op2
	;-----------------------------------------------
	; Check if op1 is NaN
	TEST	s1, 0x10
	JUMP	Z, mul_final_op1_not_NaN		; No
mul_final_op1_NaN:						; Yes
	; Check if op2 is NaN
	;TEST	s2, 0x10
	;JUMP 	NZ, return_NAN			; Yes
	JUMP	return_x_NAN
mul_final_op1_not_NaN:
	;	+inf + + inf = +inf
	;	+inf + - inf = +NaN
	;	-inf + + inf = +NaN
	;	-inf + - inf = -inf
	; infinity sign is the AND of both operands' sign bits.
	; Result NaN bit is XOR of both operands' sign bits.
	;-----------------------------------
	; Check if op1 is Inf
	TEST	s1, 0x20
	JUMP	Z, mul_final_op1_not_Inf		; No
mul_final_op1_Inf:					; Yes
	; Check if op2 is Inf	
	TEST	s2, 0x20
	JUMP	NZ, return_y_NAN_Inf		; Yes
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, return_y_NAN		; Yes
	JUMP	return_x_NAN_Inf
mul_final_op1_not_Inf:	
	; Check if op1 is zero
	TEST	s1, 0x40
	JUMP	Z, mul_check_final_op2		; No
mul_final_op1_is_zero:
	; Check if op2 is Inifinity
	TEST	s2, 0x20
	JUMP	NZ, return_y_NAN_positive		; Yes
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, return_y_NAN_positive		;Yes
	JUMP	return_zero_mul
	; Op1 is not NaN, Inf, and zero, so we conclude op1 is (sub)normal.	
	; We check op2 for 
	; 1) NaN
	;		Yes:	return_NaN_Inf
	;		No:		Go to step 2.
		; 2) Infinity
	;		Yes:	return_NaN_Inf
	;		No:		return x
	; 3) Zero
	;		Yes:	return zero
	;		No:		swap_step

mul_check_final_op2:	
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, return_y_NAN_positive		;Yes
	JUMP	mul_final_op2_not_NaN	
return_y_NAN_positive:
	; make y positive
	LOAD 	sE, 0x7F
	RDMEM	sD, y_7
	AND		sD, sE
	WRMEM	sD y_7	
	JUMP	return_y_NAN
		
mul_final_op2_not_NaN:					; No
	;	+inf + + inf = +inf
	;	+inf + - inf = +NaN
	;	-inf + + inf = +NaN
	;	-inf + - inf = -inf
	; infinity sign is the AND of both operands' sign bits.
	; Result NaN bit is XOR of both operands' sign bits.
	; Check if op2 is NaN
	TEST	s2, 0x10
	JUMP	NZ, return_y_NAN 		; Yes
mul_final_op2_not_Inf:				; No
	; Check if op2 is infinity
	TEST	s2, 0x20
	JUMP	NZ, return_y_NAN_Inf 	; Yes
	; Check if op2 is zero
	TEST	s2, 0x40
	JUMP	NZ, return_zero_mul				; Yes
	
	; Both operators are (sub)normal. Perform the multiplication.
	LOAD	sF, 0x00
	RET	

return_zero_mul:
	LOAD	sF, 0xFF
;	+0 +0	=> +0 	
;	-0 +0	=> -0 	
;	+0 -0	=> -0 	
;	-0 -0	=> +0 	
	RDMEM	s1, x_sign
	RDMEM	s2, y_sign
	XOR		s1, s2			; Calculate the sign of zero
	AND		s1, 0x80			; zero all other bits except sign
	LOAD	s0, 0x00
	WRMEM 	s0, r_6
	WRMEM 	s0, r_5
	WRMEM 	s0, r_4
	WRMEM 	s0, r_3
	WRMEM 	s0, r_2
	WRMEM 	s0, r_1
	WRMEM 	s0, r_0
	WRMEM 	s1, r_7
	RET	

;------------------------------------------------------------------------------------
; Procedure:			mul_cancellation()
;
; Registers Used:	Bank0 : [s6, s0]
;					Bank1 : None		
;		
; Arguments:			Bank0 : 
;					Bank1 : None
;
; Calls:				None
;					None
;
; RETs:				sA : the number of bits shifted to left 
; 
; RET Flags:			None
;
; Description:		Receives a subnormal significand in [s6, s0] and normalizes it
;------------------------------------------------------------------------------------	
mul_cancellation:
	; Count the number of leading zeros = nlz
	; Shift left by nlz, and rturn the number of shifted bits.
	; Check if er is zero then the result is as it is
	LOAD	sA, 0x01			; nlz nounter	
	LOAD	s8, s6			; make a copy of s6
	SL1  	s8
	SL1		s8
	SL1		s8
	SL1		s8
	; Count nlz in s8
	CALL 	count_nlz			; RETs number of zeros in s9
	TEST	s9, 0xFF				; is s9 = 0 ?	    
	JUMP	Z, mul_nlz_counting_done
	COMP 	s9, 0x04
	JUMP 	Z, got_nlz_4
	ADD		sA, s9				; Less than 4 zeros, Add the counted nlz to sA 
		    					;  and finish the nlz counting,
JUMP	nlz_counting_done
mul_got_nlz_4:
	ADD		sA, 0x04				; Add 4 nlz to sA
	LOAD	s8, s5
	CALL 	count_nlz			; RETs number of zeros in s9
	COMP 	s9, 0x08
	JUMP 	Z, got_nlz_8
	ADD		sA, s9				; Less than 8 zeros, Add the counted nlz to sA 
			    				;  and finish the nlz counting,
	JUMP	nlz_counting_done
mul_got_nlz_8:
	ADD		sA, 0x08				; Add 8 nlz to sA
	LOAD	s8, s4
	CALL 	count_nlz			; RETs number of zeros in s9
	COMP 	s9, 0x08
	JUMP 	Z, got_nlz_8_s5
	ADD		sA, s9				; Less than 4 zeros, Add the counted nlz to sA 
			    				;  and finish the nlz counting,
	JUMP	nlz_counting_done
mul_got_nlz_8_s5:
	ADD		sA, 0x08				; Add 8 nlz to sA
	LOAD	s8, s3
	CALL 	count_nlz			; RETs number of zeros in s9
	COMP 	s9, 0x08
	JUMP 	Z, got_nlz_8_s4
	ADD		sA, s9				; Less than 8 zeros, Add the counted nlz to sA 
			    				;  and finish the nlz counting,
	JUMP	nlz_counting_done
mul_got_nlz_8_s4:
	ADD		sA, 0x08				; Add 8 nlz to sA
	LOAD	s8, s2
	CALL 	count_nlz			; RETs number of zeros in s9
	COMP 	s9, 0x08
	JUMP 	Z, got_nlz_8_s3
	ADD		sA, s9				; Less than 8 zeros, Add the counted nlz to sA 
			    				;  and finish the nlz counting,
	JUMP	nlz_counting_done
mul_got_nlz_8_s3:
	ADD		sA, 0x08				; Add 8 nlz to sA
	LOAD	s8, s1
	CALL 	count_nlz			; RETs number of zeros in s9
	COMP 	s9, 0x08
	JUMP 	Z, got_nlz_8_s2
	ADD		sA, s9				; Less than 8 zeros, Add the counted nlz to sA 
			    				;  and finish the nlz counting,
	JUMP	nlz_counting_done
mul_got_nlz_8_s2:
	ADD		sA, 0x08				; Add 8 nlz to sA
	LOAD	s8, s0
	CALL 	count_nlz			; RETs number of zeros in s9
	ADD		sA, s9				; Less than 8 zeros, Add the counted nlz to sA 
			    				;  and finish the nlz counting,
mul_nlz_counting_done:
	; Shift the significand to left by nlz(sA) bits.
	LOAD s9, sA			; Copy the sA
	; At this point result mantisa is in [s7, s6, ..., s1] 				
mul_intermediate_shift_riht_loop:
	SL0  s0				; 1-bit left shift		
	ROLC s1						
	ROLC s2		
	ROLC s3		
	ROLC s4		
	ROLC s5		
	ROLC s6		
	ROLC s7
	SUB s9, 0x01
	JUMP NZ, mul_intermediate_shift_riht_loop
	RET

